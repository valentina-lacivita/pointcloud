[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "point_cloud",
    "section": "",
    "text": "Given a list of 3D points, where each point has an A or B label, this module defines a set of functions to calculate new points labeled C, at a fixed distance from each point B, and directed outside the input point cloud. Specifically, first the input point cloud centroid is calculated. Then, for each B point, a new C point is determined, following a prescribed distance D from the point B, along the direction centroid -&gt; B.",
    "crumbs": [
      "point_cloud"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "point_cloud",
    "section": "Usage",
    "text": "Usage\nDocumentation can be found hosted on this GitHub repository’s pages.\n\nRun the module on provided input data using Docker\nWe have defined a minimalist Docker wrapper that installs this package, runs it on the input data, and export the results. After cloning this repo, go to the docker directory run the command:\ndocker compose up --build\nThe files with the output points data and related plot will be exported to the data directory.\n\n\nExtra: beyond Docker / module installation via pip\nInstall latest from the GitHub repository:\npip install git+https://github.com/valentina-lacivita/pointcloud.git\n\nExample: running C-points calculation on provided input data\nThe following command reads the input file containg the labeled A and B points, calculates the C points and save them in a file on the same directory (please update the file path accordingly):\n\ninput_data = \"../data/cdd.txt\"\noutput_result = \"../data/result_C_points.txt\"\ncalculate_C_points(input_data, output_result)\n\nLoading input data from '../data/cdd.txt'...\nCalculate points...\nSaving result data to '../data/result_C_points.txt'...\nDone.\n\n\nUsing optional parameters, one can also plot the point cloud along with the new C vectors by including also a filename for the plot image and specify a prescribed distance between the points B and C:\n\noutput_plot = \"../data/result_plot.png\"\ncalculate_C_points(input_data, output_result, output_plot_file=output_plot, distance=1.0)\n\nLoading input data from '../data/cdd.txt'...\nCalculate points...\nSaving result data to '../data/result_C_points.txt'...\nExporting plots to '../data/result_plot.png'...\nDone.",
    "crumbs": [
      "point_cloud"
    ]
  },
  {
    "objectID": "index.html#development",
    "href": "index.html#development",
    "title": "point_cloud",
    "section": "Development",
    "text": "Development\n\nFor the thought process behind the code, please follow the core notebook.\n\n\nTo browse the module code itself, please check out core.py and the core documentation.\n\nGiven the characteristics of the problem, the emphasis in documentation quality and time constraints, we have chosen to leverage nbdev to write, test, document, and distribute software package.\n\nContributing\n\n1. Setup the dev environment\nFirst checkout the repository and run with uv:\nuv run nbdev_install_quarto\nAnd\nuv run nbdev_install_hooks\n\n\n2. Enable the new kernel for the Jupyter notebook\nRun in the project folder:\nuv run ipython kernel install --user --name=point_cloud\nLaunch jupyter lab to to open the notebooks:\nuv run jupyter lab\nIn the notebook one can select the correct kernel with the option: Kernel -&gt; Change Kernel.\n\n\n3. Add/change code\nTo add/change code, update jupyter notebooks in nbs accordingly. Before committing the changes inside open the virtual environment created in the project root folder:\nsource .venv/bin/activate\nThen run the git commit inside the virtual environment such that pre-commit hooks can be run and update the module code automatically. These hooks clean the notebooks to get rid of extreanous output for git and build the .py modules from Jupyter notebooks.\nThe next step is to install the package\npip install -e '.[dev]'\nAlso consider running inside the virtual environment * nbdev_test to test the code * nbdev_readme to update the repo’s README.md file from the index notebook.\nWhen code is pushed to Github, it will trigger a CI workflow that runs tests. When code is merged to main will trigger another workflow to update the package documentation on Github pages.",
    "crumbs": [
      "point_cloud"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core_functions",
    "section": "",
    "text": "1. Load input data\n\nsource\n\n\nload_input_data\n\n load_input_data (path:str)\n\nLoad data from a txt file with headers [label, x, y, z] and values separated by spaces.\n\n\n\n\nType\nDetails\n\n\n\n\npath\nstr\npath to data file\n\n\nReturns\nDataFrame\n\n\n\n\n\ninput_data = load_input_data(\"../data/cdd.txt\")\n\n\ninput_data.head().round(2)\n\n\n\n\n\n\n\n\nlabel\nx\ny\nz\n\n\n\n\n0\nA\n2.36\n-0.45\n0.65\n\n\n1\nA\n0.97\n-0.12\n0.40\n\n\n2\nB\n0.70\n1.29\n0.19\n\n\n3\nA\n0.04\n1.50\n-1.14\n\n\n4\nA\n0.01\n0.14\n-1.81\n\n\n\n\n\n\n\n\ninput_data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 24 entries, 0 to 23\nData columns (total 4 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   label   24 non-null     object \n 1   x       24 non-null     float64\n 2   y       24 non-null     float64\n 3   z       24 non-null     float64\ndtypes: float64(3), object(1)\nmemory usage: 896.0+ bytes\n\n\nThe input contains a list of 24 points, each of which is defined by a label and its xyz-coordinates.\n\ninput_data[\"label\"].value_counts()\n\nlabel\nB    15\nA     9\nName: count, dtype: int64\n\n\nThere are 2 different subsets of points: 9 A points and 15 B points.\n\n2. Calculate the centroid of the point cloud\n\nsource\n\n\n\nget_centroid\n\n get_centroid (points:&lt;built-infunctionarray&gt;)\n\nCalculate centroid of point cloud.\n\n\n\n\nType\nDetails\n\n\n\n\npoints\narray\nxyz-coords of points\n\n\nReturns\narray\n\n\n\n\n\ncentroid = get_centroid(input_data[[\"x\", \"y\", \"z\"]].values)\ncentroid.round(2)\n\narray([ 0.24, -0.16, -0.31])\n\n\n\n3. Generate new C points from B points\nFirst create a function to select the B points:\n\nsource\n\n\n\nget_labeled_points\n\n get_labeled_points (input_data:pandas.core.frame.DataFrame, label:str)\n\nSelect subset of points by label.\n\n\n\n\nType\nDetails\n\n\n\n\ninput_data\nDataFrame\npoints labels and xyz-coords\n\n\nlabel\nstr\nlabel of subset of points\n\n\nReturns\narray\n\n\n\n\n\nB_points = get_labeled_points(input_data, \"B\")\n\n\nB_points.shape\n\n(15, 3)\n\n\n\nB_points[:3].round(2)\n\narray([[ 0.7 ,  1.29,  0.19],\n       [ 0.23, -0.84, -0.63],\n       [-1.49, -1.08,  0.14]])\n\n\nThen, define a function that calculate a new point C at a given distance from a point B along the direction centroid-&gt;B\n\nsource\n\n\ncalculate_C_point\n\n calculate_C_point (B_point:&lt;built-infunctionarray&gt;, centroid:&lt;built-\n                    infunctionarray&gt;, distance:float=1.0)\n\nGiven a point B, calculate a vector C originating from B and directed outwards from the point cloud, along the direction centroid–&gt;B_point.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nB_point\narray\n\nB point\n\n\ncentroid\narray\n\ncentroid of point cloud\n\n\ndistance\nfloat\n1.0\nprescribed distance D of the B-&gt;C vector\n\n\nReturns\narray\n\n\n\n\n\nFor each B point calculate the corresponding C point\n\nC_points = np.apply_along_axis(lambda p: calculate_C_point(p, centroid), 1, B_points)\n\n\nC_points[:3].round(2)\n\narray([[ 0.99,  2.2 ,  0.5 ],\n       [ 0.21, -1.74, -1.06],\n       [-2.35, -1.54,  0.36]])\n\n\n\n4. Visualize the result\nIt is useful to visualize the results in 3D, together with the point cloud. First let’s calculate the convex hull of the original point cloud and plot it\n\nsource\n\n\n\nplot_convex_hull\n\n plot_convex_hull (ax:mpl_toolkits.mplot3d.axes3d.Axes3D, points:&lt;built-\n                   infunctionarray&gt;)\n\n3D plot of convex hull.\n\n\n\n\nType\nDetails\n\n\n\n\nax\nAxes3D\n\n\n\npoints\narray\nxyz-coords of points\n\n\nReturns\nAxes3D\n\n\n\n\nNow let’s define the functions to plot the point cloud and the new vectors C\n\nsource\n\n\nplot_points\n\n plot_points (ax:mpl_toolkits.mplot3d.axes3d.Axes3D,\n              input_data:pandas.core.frame.DataFrame)\n\n3D plot of original points.\n\n\n\n\nType\nDetails\n\n\n\n\nax\nAxes3D\n\n\n\ninput_data\nDataFrame\nlabels and xyz-coords of points\n\n\nReturns\nAxes3D\n\n\n\n\n\nsource\n\n\nplot_vectors\n\n plot_vectors (ax, vectors:&lt;built-infunctionarray&gt;, origins:&lt;built-\n               infunctionarray&gt;, length:float=0.3)\n\nPlot vectors as arrows.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nax\n\n\n\n\n\nvectors\narray\n\nvector to plot\n\n\norigins\narray\n\norigin of vector\n\n\nlength\nfloat\n0.3\nvector length\n\n\n\n\nsource\n\n\nplot_ABC\n\n plot_ABC (input_data:pandas.core.frame.DataFrame, C_points:&lt;built-\n           infunctionarray&gt;, centroid:&lt;built-infunctionarray&gt;)\n\nPlot point cloud including its convex hull and the C vectors as arrows.\n\n\n\n\nType\nDetails\n\n\n\n\ninput_data\nDataFrame\nlabels and xyz-coords of points\n\n\nC_points\narray\ncalculated C points\n\n\ncentroid\narray\ncentroid of point cloud\n\n\nReturns\nfigure\n\n\n\n\n\nfig = plot_ABC(input_data, C_points, centroid)\n\n\n\n\n\n\n\n\nLet’s create a function to run it all, end-to-end:\n\nsource\n\n\ncalculate_C_points\n\n calculate_C_points (input_file:str, output_file:str,\n                     output_plot_file:str=None, distance:float=1.0)\n\nCalculate C points and export them to a file (together with the result plot, optionally).\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninput_file\nstr\n\ninput file path with point A and B data\n\n\noutput_file\nstr\n\noutput file path for the generated C points\n\n\noutput_plot_file\nstr\nNone\noutput file path for the plot of point cloud and C vectors\n\n\ndistance\nfloat\n1.0\nprescribed distance D of the B-&gt;C vectors\n\n\n\nAnd run it on the input data:\n\ninput_data = \"../data/cdd.txt\"\noutput_result = \"../data/result_C_points.txt\"\noutput_plot = \"../data/result_plot.png\"\n\n\ncalculate_C_points(input_data, output_result, output_plot_file=output_plot)\n\nLoading input data from '../data/cdd.txt'...\nCalculate points...\nSaving result data to '../data/result_C_points.txt'...\nExporting plots to '../data/result_plot.png'...\nDone.",
    "crumbs": [
      "core_functions"
    ]
  }
]